// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id                     String                   @id @default(uuid())
  name          String?
  accounts               Account[]
  sessions               Session[]
  email                  String                   @unique
  image                  String?                 
  emailVerified          DateTime?               
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @map("updated_at")
  activeWorkoutProgramId  String?   @map("active_workout_program_id")
  activeWorkoutProgram    WorkoutProgram? @relation("ActiveProgram", fields: [activeWorkoutProgramId], references: [id], onDelete: SetNull)
  // Relations
  workoutPrograms        WorkoutProgram[]         @relation("CreatedByUser")
  exerciseCompletions    ExerciseCompletion[]
  workoutDayCompletions  WorkoutDayCompletion[]
  workoutGroupCompletions WorkoutGroupCompletion[]
  sentAssignments        WorkoutAssignment[]      @relation("SenderAssignments")
  receivedAssignments    WorkoutAssignment[]      @relation("RecipientAssignments")
  workoutStats           UserWorkoutStat[]

  @@map("users")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_tokens")
}


// Workout Program model
model WorkoutProgram {
  id                     String                   @id @default(uuid())
  title                  String
  description            String?
  createdByUserId        String                   @map("created_by_user_id")
  createdAt              DateTime                 @default(now()) @map("created_at")
  updatedAt              DateTime                 @default(now()) @map("updated_at")
  
  usersActiveProgram      User[] @relation("ActiveProgram")

  // Relations
  createdByUser          User                     @relation("CreatedByUser", fields: [createdByUserId], references: [id], onDelete: Cascade)
  workoutGroups          WorkoutGroup[]
  assignments            WorkoutAssignment[]
  userStats              UserWorkoutStat[]
  exerciseCompletions    ExerciseCompletion[]
  workoutDayCompletions  WorkoutDayCompletion[]
  workoutGroupCompletions WorkoutGroupCompletion[]

  @@map("workout_programs")
  @@index([createdByUserId])
}

// Workout Group model
model WorkoutGroup {
  id                     String                   @id @default(uuid())
  programId              String                   @map("program_id")
  order                  Int
  title                  String?
  createdAt              DateTime                 @default(now()) @map("created_at")
  
  // Relations
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)
  workoutDays            WorkoutDay[]
  groupCompletions       WorkoutGroupCompletion[]
  dayCompletions         WorkoutDayCompletion[]

  @@map("workout_groups")
  @@index([programId])
}

// Workout Day model
model WorkoutDay {
  id                     String                   @id @default(uuid())
  groupId                String                   @map("group_id")
  order                  Int
  isRestDay              Boolean                  @default(false) @map("is_rest_day")
  createdAt              DateTime                 @default(now()) @map("created_at")
  
  // Relations
  group                  WorkoutGroup             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  exercises              Exercise[]
  dayCompletions         WorkoutDayCompletion[]
  lastCompletedStats     UserWorkoutStat[]        @relation("LastCompletedDay")
  exerciseCompletions    ExerciseCompletion[]

  @@map("workout_days")
  @@index([groupId])
}

// Exercise model
model Exercise {
  id                     String                   @id @default(uuid())
  dayId                  String                   @map("day_id")
  name                   String
  notes                  String?
  targetWarmupSets       Int                      @map("target_warmup_sets")
  targetWorkingSets      Int                      @map("target_working_sets")
  targetReps             String                   @map("target_reps")
  order                  Int
  createdAt              DateTime                 @default(now()) @map("created_at")
  
  // Relations
  day                    WorkoutDay               @relation(fields: [dayId], references: [id], onDelete: Cascade)
  exerciseCompletions    ExerciseCompletion[]

  @@map("exercises")
  @@index([dayId])
}

// Exercise Completion model
model ExerciseCompletion {
  id                     String                   @id @default(uuid())
  exerciseId             String                   @map("exercise_id")
  userId                 String                   @map("user_id")
  workoutDayId           String                   @map("workout_day_id")
  programId              String                   @map("program_id")
  completedAt            DateTime                 @default(now()) @map("completed_at")
  userNotes              String?                  @map("user_notes")
  
  // Relations
  exercise               Exercise                 @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutDay             WorkoutDay               @relation(fields: [workoutDayId], references: [id], onDelete: Cascade)
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([exerciseId, userId, workoutDayId])
  @@map("exercise_completions")
  @@index([exerciseId])
  @@index([userId])
  @@index([workoutDayId])
  @@index([programId])
}

// Workout Day Completion model
model WorkoutDayCompletion {
  id                     String                   @id @default(uuid())
  dayId                  String                   @map("day_id")
  userId                 String                   @map("user_id")
  workoutGroupId         String                   @map("workout_group_id")
  programId              String                   @map("program_id")
  completedAt            DateTime                 @default(now()) @map("completed_at")
  
  // Relations
  day                    WorkoutDay               @relation(fields: [dayId], references: [id], onDelete: Cascade)
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  workoutGroup           WorkoutGroup             @relation(fields: [workoutGroupId], references: [id], onDelete: Cascade)
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([dayId, userId])
  @@map("workout_day_completions")
  @@index([dayId])
  @@index([userId])
}

// Workout Group Completion model
model WorkoutGroupCompletion {
  id                     String                   @id @default(uuid())
  groupId                String                   @map("group_id")
  userId                 String                   @map("user_id")
  programId              String                   @map("program_id")
  completedAt            DateTime                 @default(now()) @map("completed_at")
  
  // Relations
  group                  WorkoutGroup             @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([groupId, userId])
  @@map("workout_group_completions")
  @@index([groupId])
  @@index([userId])
}

// Workout Assignment model
model WorkoutAssignment {
  id                     String                   @id @default(uuid())
  senderId               String                   @map("sender_id")
  recipientId            String                   @map("recipient_id")
  programId              String                   @map("program_id")
  assignedAt             DateTime                 @default(now()) @map("assigned_at")
  isActive               Boolean                  @default(true) @map("is_active")
  
  // Relations
  sender                 User                     @relation("SenderAssignments", fields: [senderId], references: [id], onDelete: Cascade)
  recipient              User                     @relation("RecipientAssignments", fields: [recipientId], references: [id], onDelete: Cascade)
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)

  @@unique([recipientId, programId])
  @@map("workout_assignments")
  @@index([senderId])
  @@index([recipientId])
  @@index([programId])
}

// User Workout Stats model
model UserWorkoutStat {
  id                     String                   @id @default(uuid())
  userId                 String                   @map("user_id")
  programId              String                   @map("program_id")
  completedDayCount      Int                      @default(0) @map("completed_day_count")
  lastCompletedDayId     String?                  @map("last_completed_day_id")
  lastCompletedAt        DateTime?                @map("last_completed_at")
  programStartDate       DateTime?                @map("program_start_date")
  
  // Relations
  user                   User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  program                WorkoutProgram           @relation(fields: [programId], references: [id], onDelete: Cascade)
  lastCompletedDay       WorkoutDay?              @relation("LastCompletedDay", fields: [lastCompletedDayId], references: [id], onDelete: SetNull)

  @@unique([userId, programId])
  @@map("user_workout_stats")
  @@index([userId])
  @@index([programId])
}
